import 'babel-polyfill';

import { tweenPaths } from '../../src';
import { getPoints, toPath } from 'svg-shapes';

const paths = [
  'M256,213C245,181,206,187,234,262C147,181,169,71.2,233,18C220,56,235,81,283,88C285,78.7,286,69.3,288,60C289,61.3,290,62.7,291,64C291,64,297,63,300,63C303,63,309,64,309,64C310,62.7,311,61.3,312,60C314,69.3,315,78.7,317,88C365,82,380,56,367,18C431,71,453,181,366,262C394,187,356,181,344,213C328,185,309,184,300,284C291,184,272,185,256,213Z',
  'M212,220C197,171,156,153,123,221C109,157,120,109,159,63.6C190,114,234,115,254,89.8C260,82.3,268,69.6,270,60.3C273,66.5,275,71.6,280,75.6C286,79.5,294,79.8,300,79.8C306,79.8,314,79.5,320,75.6C325,71.6,327,66.5,330,60.3C332,69.6,340,82.3,346,89.8C366,115,410,114,441,63.6C480,109,491,157,477,221C444,153,403,171,388,220C366,188,316,200,300,248C284,200,234,188,212,220Z',
  'M213,222C219,150,165,139,130,183C125,123,171,73.8,247,51.6C205,78,236,108,280,102C281,90.3,282,79,286,68.2C287,72,288,75.8,289,79.7C293,79.7,296,79.7,300,79.7C304,79.7,307,79.7,311,79.7C312,75.8,313,72,314,68.2C318,79,319,90.3,320,102C364,108,395,78,353,51.6C429,73.8,475,123,470,183C435,139,381,150,387,222C364,176,315,172,300,248C285,172,236,176,213,222Z',
  'M218,231C191,238,165,252,140,266C144,209,156,153,193,93.7C218,106,249,105,280,102C282,90.3,284,78.6,289,67.8C290,71.6,291,75.8,292,79.7C292,79.7,297,79.7,300,79.7C303,79.7,308,79.7,308,79.7C309,75.8,310,71.6,311,67.8C316,78.6,318,90.3,320,102C351,105,382,106,407,93.7C444,153,456,209,460,266C435,252,409,238,382,231C355,224,328,223,300,223C272,223,245,224,218,231Z',
  'M258,243C220,201,221,220,253,281C154,243,150,108,229,61.9C242,83,257,98.1,275,110C278,88,282,65.8,285,43.6C287,49.9,288,56.2,290,62.5C293,62.7,297,62.9,300,62.9C303,62.9,307,62.7,310,62.5C312,56.2,313,49.9,315,43.6C318,65.8,322,88,325,110C343,98.1,358,83,371,61.9C450,108,446,243,347,281C379,220,380,201,342,243C330,187,329,202,300,271C271,202,270,187,258,243Z',
  'M235,210C214,139,143,145,183,229C108,175,135,70.1,242,48.3C190,85.6,245,142,278,95.5C281,80.2,281,62.7,284,48.7C287,53.9,287,59.1,289,64.5C292,64.7,297,64.2,300,64.2C303,64.2,308,64.7,311,64.5C313,59.1,313,53.9,316,48.7C319,62.7,319,80.2,322,95.5C355,142,410,85.6,358,48.3C465,70.1,492,175,417,229C457,145,386,139,365,210C357,147,309,190,300,271C291,190,243,147,235,210Z',
  'M249,157C214,157,201,203,273,255C157,221,157,69,274,32.8C188,87.2,211,140,256,140C291,140,289,128,291,98.1C293,107,293,116,295,125C297,125,298,125,300,125C302,125,305,125,305,125C307,116,307,107,309,98.1C311,128,309,140,344,140C389,140,412,87.2,326,32.8C443,69,443,221,327,255C399,203,386,157,351,157C317,157,300,195,300,238C300,195,283,157,249,157Z',
  'M264,212C213,138,150,171,232,244C101,217,112,55.1,257,36.9C182,86.6,222,106,266,106C285,106,284,66.7,286,36.8C288,42.6,289,48.4,291,54.2C291,54.2,297,54.2,300,54.2C303,54.2,309,54.2,309,54.2C311,48.4,312,42.6,314,36.8C316,66.7,315,106,334,106C378,106,418,86.6,343,36.9C488,55.1,499,217,368,244C450,171,387,138,336,212C354,161,300,163,300,249C300,163,246,161,264,212Z',
  'M223,217C194,153,165,168,133,219C143,158,161,99.2,189,38.4C214,69.8,241,84.7,272,86.2C272,70.2,273,53.5,273,37.5C275,47.9,278,58.4,280,68.8C287,64.9,292,62.4,300,62.4C308,62.4,313,64.9,320,68.8C322,58.4,325,47.9,327,37.5C327,53.5,328,70.2,328,86.2C359,84.7,386,69.8,411,38.4C439,99.2,457,158,467,219C435,168,406,153,377,217C350,162,319,176,300,245C281,176,250,162,223,217Z',
  'M231,185C186,159,161,180,190,215C86.2,180,92.6,99.6,211,68.9C195,112,254,141,279,96.7C279,83.2,279,69.8,279,56.3C283,63.6,288,70.8,292,78.1C295,78.1,297,78.1,300,78.1C303,78.1,305,78.1,308,78.1C312,70.8,317,63.6,321,56.3C321,69.8,321,83.2,321,96.7C346,141,405,112,389,68.9C507,99.6,514,180,410,215C439,180,414,159,369,185C351,165,324,167,300,216C276,167,249,165,231,185Z',
  'M194,146C192,107,164,76.4,136,45.6C166,55.7,196,65.7,226,75.8C238,107,265,163,279,136C282,130,281,108,281,94.8C285,103,288,111,293,115C295,116,298,117,300,117C302,117,305,116,307,115C312,111,315,103,319,94.8C319,108,318,130,321,136C335,163,362,107,374,75.8C404,65.7,434,55.7,464,45.6C436,76.4,408,107,406,146C355,158,323,189,300,231C277,189,245,158,194,146Z',
  'M209,182C184,132,176,138,113,161C140,136,168,111,196,86.5C221,104,247,115,278,115C281,99.9,285,85.5,287,70.2C289,78.5,292,88.4,294,96.7C296,96.7,298,96.7,300,96.7C302,96.7,304,96.7,306,96.7C308,88.4,311,78.5,313,70.2C315,85.5,319,99.9,322,115C353,115,379,104,404,86.5C432,111,460,136,487,161C424,138,416,132,391,182C332,150,341,161,300,214C259,161,268,150,209,182Z',
  'M198,171C189,131,150,120,113,140C142,104,182,74.4,249,70.2C208,89,248,125,278,106C285,101,286,93.5,286,74.2C288,78.1,291,81.5,294,83.2C296,84.2,298,84.7,300,84.7C302,84.7,304,84.2,306,83.2C309,81.5,312,78.1,314,74.2C314,93.5,315,101,322,106C352,125,392,89,351,70.2C418,74.4,458,104,487,140C450,120,411,131,402,171C357,147,322,171,300,214C278,171,243,147,198,171Z',
  'M202,170C188,115,157,108,124,105C146,84.3,171,71.5,199,70.2C211,98.6,243,103,277,106C279,99.3,281,92.6,283,86C285,91.9,287,97.9,290,104C293,104,297,104,300,104C303,104,307,104,310,104C313,97.9,315,91.9,317,86C319,92.6,321,99.3,323,106C357,103,389,98.6,401,70.2C429,71.5,454,84.3,476,105C443,108,412,115,398,170C349,157,318,175,300,214C282,175,251,157,202,170Z',
  'M220,179C200,127,150,130,123,175C122,110,160,85.1,201,64C208,99.2,243,111,268,92.9C278,86.1,284,68.2,287,40.7C289,49.6,292,58.4,294,67.3C296,67.3,298,67.3,300,67.3C302,67.3,304,67.3,306,67.3C308,58.4,311,49.6,313,40.7C316,68.2,322,86.1,332,92.9C357,111,392,99.3,399,64C440,85.1,478,110,477,175C450,130,400,127,380,179C355,155,305,208,300,247C295,208,245,155,220,179Z',
  'M166,154C179,119,154,95.4,114,79.3C155,79.1,197,78.9,239,78.7C242,103,250,109,283,109C289,109,290,93.9,291,83.7C292,88.3,292,92.9,293,97.5C295,97.5,298,97.5,300,97.5C302,97.5,305,97.5,307,97.5C308,92.9,308,88.3,309,83.7C310,93.9,311,109,317,109C350,109,358,103,361,78.7C403,78.9,445,79.1,486,79.3C446,95.4,421,119,434,154C377,151,320,151,300,207C280,151,223,151,166,154Z',
];

const path = document.getElementById( 'path' );

path.setAttribute( 'd', toPath( getPoints( 'path', { d: paths[ 0 ]})));

const move = c => {
  const isLast = !Boolean( paths[ c + 1 ]);
  const n = isLast ? 0 : c + 1;

  tweenPaths({
    duration: 800,
    easing: 'easeOutBounce',
    from: paths[ c ],
    to: paths[ n ],
    next: d => path.setAttribute( 'd', d ),
    complete: () => setTimeout(() => { move( isLast ? 0 : c + 1 ) }, 700 ),
  });
};

setTimeout(() => { move( 0 ) }, 1000 );
